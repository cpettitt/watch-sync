{"version":3,"sources":["index.es6"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// Get stack traces that point to the original ES6 code.\nimport \"source-map-support/register\";\n\n// Include babel polyfill\nimport \"babel/polyfill\";\n\nimport { EventEmitter } from \"events\";\nimport chokidar from \"chokidar\";\nimport defaults from \"lodash/object/defaults\";\nimport fs from \"fs-extra\";\nimport isAbsolute from \"path-is-absolute\";\nimport path from \"path\";\nimport pick from \"lodash/object/pick\";\n\n// Read version in from package.json\nconst version = JSON.parse(fs.readFileSync(path.join(__dirname, \"package.json\"))).version;\n\nconst DEFAULT_OPTS = {\n  preserveTimestamps: \"all\",\n  delete: false\n};\n\nclass FSSyncer extends EventEmitter {\n  constructor(glob, dest, opts) {\n    super();\n\n    if (isAbsolute(glob)) {\n      throw new Error(\"Glob cannot be an absolute path. Use cwd option to set the base directory.\");\n    }\n\n    opts = defaults(opts || {}, DEFAULT_OPTS);\n    this._cwd = opts.cwd || \".\";\n    this._dest = dest;\n\n    this._preserveTimestamps = opts.preserveTimestamps;\n\n    this._delete = opts.delete;\n    if (this._delete) {\n      this._visited = new Set();\n    }\n\n    if (!dest) {\n      throw new Error(\"A destination must be specified!\");\n    }\n    fs.ensureDirSync(dest);\n\n    this._watcher = chokidar.watch(glob, filterChokidarOptions(opts))\n      .on(\"all\", (e, p, s) => this._handleWatchEvent(e, p, s))\n      .on(\"error\", e => this._handleError(e))\n      .on(\"ready\", () => this._handleReady());\n  }\n\n  close() {\n    this._watcher.close();\n  }\n\n  _handleReady() {\n    // If we were tracking visited files before the \"ready\" event then we\n    // have the delete option enabled. Time to visit the destination and\n    // ensure we remove everything not visited. We do this synchronously\n    // to ensure we're in a consistent state when we get subsequent updates\n    // from Chokidar.\n    this._deleteUnvisitedFiles();\n    this.emit(\"ready\");\n  }\n\n  _handleError(e) {\n    this.emit(\"error\", e);\n  }\n\n  _handleWatchEvent(event, filePath, stat) {\n    // If we're tracking visited files add filePath to the visited set.\n    if (this._visited && event !== \"unlink\" && event !== \"unlinkDir\") {\n      this._visited.add(filePath);\n    }\n\n    const timestamps = this._preserveTimestamps;\n    const destPath = path.join(this._dest, filePath);\n    switch (event) {\n      case \"add\":\n      case \"change\":\n        fs.copySync(path.join(this._cwd, filePath), destPath, {\n          preserveTimestamps: timestamps === \"all\" || timestamps === \"file\" \n        });\n        break;\n      case \"addDir\":\n        fs.ensureDirSync(destPath);\n        if (timestamps === \"all\" || timestamps === \"dir\") {\n          if (!stat) {\n            // BUG it seems we sometimes do not get a stat from chokidar, so get it again.\n            stat = fs.statSync(filePath);\n          }\n          fs.utimesSync(destPath, stat.atime, stat.mtime);\n        }\n        break;\n      case \"unlink\":\n      case \"unlinkDir\":\n        if (!this._delete) {\n          // Do not fire an event since we did not actually delete the file.\n          return;\n        }\n        fs.removeSync(destPath);\n        break;\n    }\n\n    this.emit(event, filePath, destPath, stat);\n    this.emit(\"all\", event, filePath, destPath, stat);\n  }\n\n  _deleteUnvisitedFiles() {\n    if (!this._visited || !this._delete) {\n      delete this._visited;\n      return;\n    }\n\n    const visitStack = fs.readdirSync(this._dest);\n    while (visitStack.length) {\n      const f = visitStack.pop();\n      if (!this._visited.has(f)) {\n        // We did not visit this file so delete it.\n        fs.removeSync(path.join(this._dest, f));\n      } else if (fs.statSync(f).isDirectory()) {\n        fs.readdirSync(f).forEach(subfile => visitStack.push(path.join(f, subfile)));\n      }\n    }\n\n    delete this._visited;\n  }\n}\n\nfunction sync(glob, dest, opts) {\n  return new FSSyncer(glob, dest, opts);\n}\n\nfunction filterChokidarOptions(opts) {\n  return pick(opts, [\n    \"cwd\",\n    \"depth\",\n    \"ignored\",\n    \"persistent\",\n  ]);\n}\n\nexport default {\n  sync,\n  version\n};\n"]}